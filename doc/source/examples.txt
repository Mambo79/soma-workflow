.. _examples:

========
Examples
========

Simple workflows
================


Example 1:
---------- 

Create the workflow: ::

  from soma.workflow.client import Job, Workflow, WorkflowController

  job_1 = Job(command=["sleep", "60"], name="job 1")
  job_2 = Job(command=["sleep", "60"], name="job 2")
  job_3 = Job(command=["sleep", "60"], name="job 3")
  job_4 = Job(command=["sleep", "60"], name="job 4")

  jobs = [job_1, job_2, job_3, job_4]
  dependencies = [(job_1, job_2), 
                  (job_1, job_3), 
                  (job_2, job_4), 
                  (job_3, job_4)]

  workflow = Workflow(jobs=jobs, 
                      dependencies=dependencies)

Submit the workflow: ::

  controller = WorkflowController("Titan", login, password)

  controller.submit_workflow(workflow=workflow,
                             name="simple example")

Run the Python script and monitor the execution of the workflow using 
the GUI (soma_workflow_gui command):

.. image:: images/simple_example_gui.png
  :scale: 60

You can close and open the GUI at any time. It will not interrupt the workflow
execution.


Example 2: with Group
----------------------

Create the workflow: ::

  from soma.workflow.client import Job, Workflow, Group, WorkflowController

  jobs = []
  dependencies = []
  group_elements = []

  first_job = Job(command=["sleep", "10"], name="first job")
  last_job = Job(command=["sleep", "10"], name="last job")

  jobs.append(first_job)
  jobs.append(last_job)

  for i in range(0, 30):
    job = Job(command=["sleep", "60"], name="job " + repr(i))

    jobs.append(job)

    dependencies.append((first_job, job))
    dependencies.append((job, last_job))

    group_elements.append(job)
    
  
  thirty_jobs_group = Group(elements=group_elements,
                            name="my 30 jobs")

  workflow = Workflow(jobs=jobs,
                      dependencies= dependencies,
                      root_group=[first_job, thirty_jobs_group, last_job])

Submit the workflow: ::

  controller = WorkflowController("Titan", login, password)

  controller.submit_workflow(workflow=workflow,
                             name="Simple workflow with group")


Run the Python script and monitor the execution of the workflow using 
the GUI (soma_workflow_gui command):

.. image:: images/simple_example_group_gui.png
  :scale: 60
  
  

Workflows with FileTransfer
===========================

Basic file transfer
-------------------

To run this example, create first the file "/tmp/soma_workflow_examples/myfile" 
with any content. It will stand as an input file to transfer.

Create the workflow : ::

  from soma.workflow.client import Job, Workflow, WorkflowController, FileTransfer

  # FileTransfer creation for input files
  myfile = FileTransfer(is_input=True,
                      client_path="/tmp/soma_workflow_examples/myfile",
                      name="myfile")

  # FileTransfer creation for output files
  copy_of_myfile = FileTransfer(is_input=False,
                                client_path="/tmp/soma_workflow_examples/copy_of_myfile",
                                name="copy of my file")

  # Job and Workflow 
  copy_job = Job(command=["cp", myfile, copy_of_myfile], 
                name="copy",
                referenced_input_files=[myfile],
                referenced_output_files=[copy_of_myfile])

  workflow = Workflow(jobs=[copy_job], 
                      dependencies=[])


Submit the workflow: ::

  controller = WorkflowController("Titan", login, password)

  controller.submit_workflow(workflow=workflow,
                            name="simple transfer")

Run the Python script and open the GUI:

.. image:: images/file_transfer_example_gui.png
  :scale: 60

Transfer the input files, clicking the "Transfer Input Files" button:

.. image:: images/file_transfer_example_gui_1.png
  :scale: 80

The job will start as soon as the transfer ended:

.. image:: images/file_transfer_example_gui_2.png
  :scale: 80

When the workflow is done, transfer the output files clicking the 
"Transfer Output Files" button:

.. image:: images/file_transfer_example_gui_3.png
  :scale: 80

The progression and the end of the transfer is displayed in the GUI:

.. image:: images/file_transfer_example_gui_4.png
  :scale: 80

.. seealso:: :ref:`file-transfer-status`


Working directory transfer
--------------------------



Workflows with SharedResourcePath
=================================

**TO DO**